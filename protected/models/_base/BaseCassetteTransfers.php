<?php

/**
 * This is the model base class for the table "cassette_transfers".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "CassetteTransfers".
 *
 * Columns in table "cassette_transfers" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $recording_name
 * @property string $speaker
 * @property string $content
 * @property integer $year_of_recording
 * @property string $category
 * @property integer $duration
 * @property string $details
 * @property string $date_out
 * @property string $given_to
 * @property string $given_by
 * @property integer $units
 * @property integer $lead_time
 * @property string $remarks
 * @property string $status
 *
 */
abstract class BaseCassetteTransfers extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'cassette_transfers';
    }

    public static function representingColumn() {
        return 'recording_name';
    }

    public function rules() {
        return array(
            array('recording_name, speaker, content, year_of_recording, category, duration, details, date_out, given_to, given_by, units, lead_time, remarks, status', 'required'),
            array('year_of_recording, duration, units, lead_time', 'numerical', 'integerOnly'=>true),
            array('recording_name', 'length', 'max'=>256),
            array('speaker, category, given_to, given_by', 'length', 'max'=>128),
            array('content, details, remarks', 'length', 'max'=>512),
            array('status', 'length', 'max'=>32),
            array('id, recording_name, speaker, content, year_of_recording, category, duration, details, date_out, given_to, given_by, units, lead_time, remarks, status', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'recording_name' => Yii::t('app', 'Recording Name'),
                'speaker' => Yii::t('app', 'Speaker'),
                'content' => Yii::t('app', 'Content'),
                'year_of_recording' => Yii::t('app', 'Year Of Recording'),
                'category' => Yii::t('app', 'Category'),
                'duration' => Yii::t('app', 'Duration'),
                'details' => Yii::t('app', 'Details'),
                'date_out' => Yii::t('app', 'Date Out'),
                'given_to' => Yii::t('app', 'Given To'),
                'given_by' => Yii::t('app', 'Given By'),
                'units' => Yii::t('app', 'Units'),
                'lead_time' => Yii::t('app', 'Lead Time'),
                'remarks' => Yii::t('app', 'Remarks'),
                'status' => Yii::t('app', 'Status'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('recording_name', $this->recording_name, true);
        $criteria->compare('speaker', $this->speaker, true);
        $criteria->compare('content', $this->content, true);
        $criteria->compare('year_of_recording', $this->year_of_recording);
        $criteria->compare('category', $this->category, true);
        $criteria->compare('duration', $this->duration);
        $criteria->compare('details', $this->details, true);
        $criteria->compare('date_out', $this->date_out, true);
        $criteria->compare('given_to', $this->given_to, true);
        $criteria->compare('given_by', $this->given_by, true);
        $criteria->compare('units', $this->units);
        $criteria->compare('lead_time', $this->lead_time);
        $criteria->compare('remarks', $this->remarks, true);
        $criteria->compare('status', $this->status, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}