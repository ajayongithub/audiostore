<?php

/**
 * This is the model base class for the table "tape_file".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TapeFile".
 *
 * Columns in table "tape_file" available as properties of the model,
 * followed by relations of table "tape_file" available as properties of the model.
 *
 * @property integer $id
 * @property string $file_detail
 * @property integer $set_id
 * @property integer $tape_no
 * @property string $side
 * @property string $first_date
 * @property string $second_date
 * @property string $third_date
 * @property integer $duration
 * @property string $content
 * @property string $keyword1
 * @property string $keyword2
 * @property string $keyword3
 * @property string $status
 * @property string $remarks
 *
 * @property TapeSet $set
 */
abstract class BaseTapeFile extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'tape_file';
    }

    public static function representingColumn() {
        return 'file_detail';
    }

    public function rules() {
        return array(
            array('file_detail, set_id, tape_no, side, first_date, duration, content, status', 'required'),
            array('set_id, tape_no, duration', 'numerical', 'integerOnly'=>true),
            array('file_detail, content, remarks', 'length', 'max'=>512),
            array('side, keyword1, keyword2, keyword3', 'length', 'max'=>32),
            array('status', 'length', 'max'=>128),
            array('second_date, third_date', 'safe'),
            array('second_date, third_date, keyword1, keyword2, keyword3, remarks', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, file_detail, set_id, tape_no, side, first_date, second_date, third_date, duration, content, keyword1, keyword2, keyword3, status, remarks', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'set' => array(self::BELONGS_TO, 'TapeSet', 'set_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'file_detail' => Yii::t('app', 'File Detail'),
                'set_id' => Yii::t('app', 'Set'),
                'tape_no' => Yii::t('app', 'Tape No'),
                'side' => Yii::t('app', 'Side'),
                'first_date' => Yii::t('app', 'First Date'),
                'second_date' => Yii::t('app', 'Second Date'),
                'third_date' => Yii::t('app', 'Third Date'),
                'duration' => Yii::t('app', 'Duration'),
                'content' => Yii::t('app', 'Content'),
                'keyword1' => Yii::t('app', 'Keyword1'),
                'keyword2' => Yii::t('app', 'Keyword2'),
                'keyword3' => Yii::t('app', 'Keyword3'),
                'status' => Yii::t('app', 'Status'),
                'remarks' => Yii::t('app', 'Remarks'),
                'set' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('file_detail', $this->file_detail, true);
        $criteria->compare('set_id', $this->set_id);
        $criteria->compare('tape_no', $this->tape_no);
        $criteria->compare('side', $this->side, true);
        $criteria->compare('first_date', $this->first_date, true);
        $criteria->compare('second_date', $this->second_date, true);
        $criteria->compare('third_date', $this->third_date, true);
        $criteria->compare('duration', $this->duration);
        $criteria->compare('content', $this->content, true);
        $criteria->compare('keyword1', $this->keyword1, true);
        $criteria->compare('keyword2', $this->keyword2, true);
        $criteria->compare('keyword3', $this->keyword3, true);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('remarks', $this->remarks, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'ActiveRecordRelation' => array(
                'class' => 'EActiveRecordRelationBehavior',
            ),
        ), parent::behaviors());
    }
}
