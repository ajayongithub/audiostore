<?php

/**
 * This is the model base class for the table "tape_out".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TapeOut".
 *
 * Columns in table "tape_out" available as properties of the model,
 * followed by relations of table "tape_out" available as properties of the model.
 *
 * @property integer $id
 * @property integer $set_id
 * @property string $given_to
 * @property string $given_by
 * @property string $given_on
 * @property string $received_on
 * @property string $category
 * @property integer $year_of_recording
 * @property string $details
 * @property integer $start_tape_no
 * @property integer $end_tape_no
 * @property string $status
 * @property integer $leadtime
 * @property string $content
 * @property integer $duration
 * @property string $remarks
 * @property string $extra1
 * @property integer $extra2
 *
 * @property TapeSet $set
 */
abstract class BaseTapeOut extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'tape_out';
    }

    public static function representingColumn() {
        return 'given_to';
    }

    public function rules() {
        return array(
            array('set_id, given_to, given_by, given_on, category, year_of_recording, start_tape_no, end_tape_no, status, leadtime', 'required'),
            array('set_id, year_of_recording, start_tape_no, end_tape_no, leadtime, duration, extra2', 'numerical', 'integerOnly'=>true),
            array('given_to, given_by, status', 'length', 'max'=>32),
            array('category', 'length', 'max'=>128),
            array('details, remarks', 'length', 'max'=>512),
            array('content, extra1', 'length', 'max'=>256),
            array('received_on', 'safe'),
            array('received_on, details, content, duration, remarks, extra1, extra2', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, set_id, given_to, given_by, given_on, received_on, category, year_of_recording, details, start_tape_no, end_tape_no, status, leadtime, content, duration, remarks, extra1, extra2', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'set' => array(self::BELONGS_TO, 'TapeSet', 'set_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'set_id' => Yii::t('app', 'Set'),
                'given_to' => Yii::t('app', 'Given To'),
                'given_by' => Yii::t('app', 'Given By'),
                'given_on' => Yii::t('app', 'Given On'),
                'received_on' => Yii::t('app', 'Received On'),
                'category' => Yii::t('app', 'Category'),
                'year_of_recording' => Yii::t('app', 'Year Of Recording'),
                'details' => Yii::t('app', 'Details'),
                'start_tape_no' => Yii::t('app', 'Start Tape No'),
                'end_tape_no' => Yii::t('app', 'End Tape No'),
                'status' => Yii::t('app', 'Status'),
                'leadtime' => Yii::t('app', 'Leadtime'),
                'content' => Yii::t('app', 'Content'),
                'duration' => Yii::t('app', 'Duration'),
                'remarks' => Yii::t('app', 'Remarks'),
                'extra1' => Yii::t('app', 'Extra1'),
                'extra2' => Yii::t('app', 'Extra2'),
                'set' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('set_id', $this->set_id);
        $criteria->compare('given_to', $this->given_to, true);
        $criteria->compare('given_by', $this->given_by, true);
        $criteria->compare('given_on', $this->given_on, true);
        $criteria->compare('received_on', $this->received_on, true);
        $criteria->compare('category', $this->category, true);
        $criteria->compare('year_of_recording', $this->year_of_recording);
        $criteria->compare('details', $this->details, true);
        $criteria->compare('start_tape_no', $this->start_tape_no);
        $criteria->compare('end_tape_no', $this->end_tape_no);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('leadtime', $this->leadtime);
        $criteria->compare('content', $this->content, true);
        $criteria->compare('duration', $this->duration);
        $criteria->compare('remarks', $this->remarks, true);
        $criteria->compare('extra1', $this->extra1, true);
        $criteria->compare('extra2', $this->extra2);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'ActiveRecordRelation' => array(
                'class' => 'EActiveRecordRelationBehavior',
            ),
        ), parent::behaviors());
    }
}